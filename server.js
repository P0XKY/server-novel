require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const { Pool } = require("pg");
const fs = require("fs");
const path = require("path")
const multer = require("multer");
const bcrypt = require("bcrypt");
const session = require("express-session");

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use("/uploads", express.static("uploads"));


// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL
const pool = new Pool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
pool.connect((err) => {
  if (err) {
    console.error("‚ùå Database connection error", err.stack);
  } else {
    console.log("‚úÖ Connected to PostgreSQL");
  }
});

app.post("/register", async (req, res) => {
  const { user_name, user_pass, user_email } = req.body;
  console.log("Received Data:", req.body);
  if (!user_name || !user_pass || !user_email) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  try {
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ bcrypt
    const saltRounds = 10; // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (10 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
    const hashedPassword  = await bcrypt.hash(user_pass, saltRounds);

    const result = await pool.query(
      "INSERT INTO userinfo (user_name, user_pass , user_email) VALUES ($1, $2, $3) RETURNING *",
      [user_name, hashedPassword , user_email]
    );

    res.status(201).json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", user: result.rows[0] });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" });
  }
});

// let gloResults = null;
// let userid = null;

let userid = null;

app.use(session({
  secret: process.env.SECRET_KEY, // ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ session
  resave: false,             // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  saveUninitialized: true,   // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  cookie: { secure: false }  // ‡πÉ‡∏ä‡πâ secure: true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô HTTPS
}));

app.post("/login", async (req, res) => {
  const { user_name, user_pass } = req.body;
  console.log("Received Data:", req.body);

  if (!user_name || !user_pass) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
  }

  try {
    const result = await pool.query("SELECT * FROM userinfo WHERE user_name = $1", [user_name]);

    if (result.rows.length > 0) {
      const user = result.rows[0];

      // üîë ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
      const isMatch = await bcrypt.compare(user_pass, user.user_pass); // ‚¨ÖÔ∏è ‡πÉ‡∏ä‡πâ `user.user_pass`

      if (isMatch) {
        // ‡πÄ‡∏Å‡πá‡∏ö user_id ‡πÉ‡∏ô session
        
        req.session.userId = user.user_id;
        userid = req.session.userId;
        console.log("User_id:", req.session.userId);
        console.log("userid:", userid);
        // ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        res.status(200).json({ message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", user });
      } else {
        res.status(401).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
    } else {
      res.status(401).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
  }
});


// ‚úÖ ‡∏î‡∏∂‡∏á "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡∏î" ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.get("/favorites/:novel_id", async (req, res) => {
  try {
    const user_id = userid; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Token ‡∏´‡∏£‡∏∑‡∏≠ Session
    const { novel_id } = req.params;

    if (!user_id || !novel_id) {
      return res.status(400).json({ error: "user_id and novel_id are required" });
    }

    const result = await pool.query(
      "SELECT * FROM lastet_novel WHERE user_id = $1 AND novel_id = $2",
      [user_id, novel_id]
    );

    res.json({ isFavorite: result.rowCount > 0 });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡∏î" ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.post("/favorites", async (req, res) => {
  const { novel_id } = req.body;
  const user_id = userid
  console.log("novel_id post:", req.body);
  if (!user_id || !novel_id) {
    return res.status(400).json({ error: "user_id and novel_id are required" });
  }

  try {
    await pool.query(
      "INSERT INTO lastet_novel (user_id, novel_id) VALUES ($1, $2) ON CONFLICT DO NOTHING",
      [user_id, novel_id]
    );
    res.status(201).json({ message: "Added to favorites" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ ‡∏•‡∏ö "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡∏î" ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.delete("/favorites/:novel_id", async (req, res) => {
  try {
    const user_id = userid;
    const { novel_id } = req.params;

    if (!user_id || !novel_id) {
      return res.status(400).json({ error: "user_id and novel_id are required" });
    }

    const result = await pool.query(
      "DELETE FROM lastet_novel WHERE user_id = $1 AND novel_id = $2 RETURNING *",
      [user_id, novel_id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ error: "Favorite not found" });
    }

    res.json({ message: "Removed from favorites" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ ‡∏î‡∏∂‡∏á "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡∏î" ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.get("/favorites", async (req, res) => {
  const user_id = userid;  // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á user_id ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å session/token)
  if (!user_id) return res.status(400).json({ error: "user_id is required" });

  try {
    const result = await pool.query(
      `SELECT lastet_novel.user_id, novel.novel_id, novel.novel_name, novel.novel_type_id, novel.novel_img,novel.novel_penname FROM lastet_novel INNER JOIN novel ON lastet_novel.novel_id = novel.novel_id WHERE lastet_novel.user_id = $1`, [user_id]
    );

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


// API ‡∏î‡∏∂‡∏á
app.get("/novels", async (req, res) => {
  try {
    const result = await pool.query("SELECT novel.novel_id,novel.novel_penname,noveltype.novel_type_id,novel.novel_name,novel.novel_img,noveltype.novel_type_name FROM novel INNER JOIN noveltype ON novel.novel_type_id = noveltype.novel_type_id");
    res.json(result.rows);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});

app.get("/novel", async (req, res) => {
  const user_id = userid;
  try {
    const result = await pool.query("SELECT * FROM public.userinfo INNER JOIN public.novel ON userinfo.user_id = novel.user_id WHERE userinfo.user_id = $1;",[user_id]);
    res.json(result.rows);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});

// API ‡πÄ‡∏û‡∏¥‡πà‡∏° novel
// app.post('/novel', async (req, res) => {
//   const { novel_name, novel_type_id, novel_img, novel_penname, user_id } = req.body;
  
//   console.log("Received Data:", req.body); //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

//   try {
//       //  ‡πÅ‡∏õ‡∏•‡∏á `novel_type_id` ‡πÄ‡∏õ‡πá‡∏ô `int` ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
//       const genreId = Array.isArray(novel_type_id) 
//           ? novel_type_id.map(Number) 
//           : [Number(novel_type_id)];

//       console.log("Parsed novel_type_id:", genreId); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á

//       const sql = 'INSERT INTO novel (novel_name, novel_type_id, novel_img, novel_penname, user_id) VALUES ($1, $2, $3, $4, $5);';
//       const result = await pool.query(sql, [novel_name, genreId[0], novel_img, novel_penname, user_id]);

//       res.status(200).json(result.rows[0]);
//   } catch (error) {
//       console.error("Database Error:", error);
//       res.status(500).send('Server error');
//   }
// });


const uploadDir = './uploads/';
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multer ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà `uploads/`
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './uploads/'); // ‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname)); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    }
});
const upload = multer({ storage });

// // Middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô URL ‡πÑ‡∏î‡πâ
app.use('/uploads', express.static('uploads'));

// ‚úÖ API ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Novel
app.post("/novel", upload.single("novel_img"), async (req, res) => {
  console.log("Received Data:", req.body);
  console.log("userid:", userid);
  if (!userid) {
    return res.status(401).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô!" });
  }

  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file uploaded!" });
    }
    
    const { novel_name, novel_type_id, novel_penname } = req.body;
    const novel_img = req.file.filename;
    const user_id = userid; // ‚úÖ ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å session

    const sql =
      "INSERT INTO novel (novel_name, novel_type_id, novel_img, novel_penname, user_id) VALUES ($1, $2, $3, $4, $5)";
    await pool.query(sql, [novel_name, novel_type_id, novel_img, novel_penname, user_id]);

    res.status(200).json({ message: "Novel added successfully!", novel_img });
  } catch (error) {
    console.error("Database Error:", error);
    res.status(500).send("Server error");
  }
});



// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(port, () => {
  console.log(`üöÄ Server is running on http://localhost:${port}`);
});
